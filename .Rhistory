install.packages("ape")
#rmORENILO
library(ape)
concat <- read.dna("../jg-exon-capture/12_concatinate_v2/12_concat_nf_v2.fas",format = "fasta")
unique(concat)
unique(as.vector(concat[1,]))
head(concat)
library(help = ape)
?apetools
?del.gaps
del.colgapsonly(concat, threshold = 0.5, freq.only = TRUE)
image(concat, what = "-")
# Ape delete.gaps test
library(ape)
full_concat <- read.dna("../jg-exon-capture/12_concatinate_v2/12_concat_nf_v2.fas",format = "fasta")
partial_concat <- subset(full_concat, subset = 1:3)
full_concat[1,]
full_concat[,1]
partial_concat <- full_concat[1:3,]
partial_concat <- full_concat[1:3,1:10000]
head(partial_concat)
partial_concat <- full_concat[1:3,5000:10000]
image(partial_concat)
partial_concat <- full_concat[1:5,5000:10000]
image(partial_concat)
partial_concat <- full_concat[6:10,5000:10000]
image(partial_concat)
partial_concat <- full_concat[1:10,5000:10000]
image(partial_concat)
partial_concat <- full_concat[1:20,5000:10000]
image(partial_concat)
partial_concat <- full_concat[1:20,6000:11000]
image(partial_concat)
partial_concat <- full_concat[1:20,11000:16000]
image(partial_concat)
partial_concat <- full_concat[1:20,10000:20000]
image(partial_concat)
partial_concat <- full_concat[1:19,20000:30000]
image(partial_concat)
partial_concat <- full_concat[1:19,30000:40000]
image(partial_concat)
partial_concat <- full_concat[1:19,40000:50000]
image(partial_concat)
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,50000:60000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,60000:70000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,70000:80000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,80000:90000]
image(partial_concat, what = "-", col = "black", bg = "pink")
head(full_concat)
partial_concat <- full_concat[1:19,90000:100000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,100000:110000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,110000:130000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,50000:80000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_concat <- full_concat[1:19,50000:60000]
image(partial_concat, what = "-", col = "black", bg = "pink")
partial_delete <- del.colgapsonly(partial_concat, freq.only = TRUE)
partial_delete
19*0.5
library(tidyverse)
partial_delete[partial_delete>10]
partial_delete[partial_delete>9]
unique(partial_delete)
partial_concat_count<- del.colgapsonly(partial_concat, freq.only = TRUE)
sort(unique(partial_concat_count))
table(partial_concat_count)
partial_delete <- del.colgapsonly(partial_concat, threshold = 0.5)
image(partial_delete what = "-", col = "black", bg = "pink")
image(partial_delete, what = "-", col = "black", bg = "pink")
partial_delete_count<- del.colgapsonly(partial_delete, freq.only = TRUE)
table(partial_delete_count)
partial_concat <- full_concat[1:20,50000:60000]
partial_concat_count<- del.colgapsonly(partial_concat, freq.only = TRUE)
sort(unique(partial_concat_count))
table(partial_concat_count)
19*0.75
20*.75
20*.8
partial_delete <- del.colgapsonly(partial_concat, threshold = 0.8)
partial_delete_count<- del.colgapsonly(partial_delete, freq.only = TRUE)
table(partial_delete_count)
18/20
partial_delete <- del.colgapsonly(partial_concat, threshold = 0.9)
image(partial_delete, what = "-", col = "black", bg = "pink")
partial_delete_count<- del.colgapsonly(partial_delete, freq.only = TRUE)
table(partial_delete_count)
partial_delete <- del.colgapsonly(partial_concat, threshold = 0.5)
partial_delete_count<- del.colgapsonly(partial_delete, freq.only = TRUE)
table(partial_delete_count)
#97 seq of 433,323 bases
full_concat_count <- del.colgapsonly(full_concat, freq.only = TRUE)
table(full_concat_count)
as.matrix(table(full_concat_count))
97*0.5
full_concat_delete <- del.colgapsonly(full_concat, threshold = 0.5)
full_delete_count <- del.colgapsonly(full_concat_delete, freq.only = TRUE)
as.matrix(table(full_delete_count))
head(full_concat_delete)
#97 seq of 430,998 baeses
write.FASTA(full_concat_delete, "../jg-exon-capture/12_concatinate_v2/12_concat_filtered.fas")
#Script to fix format issues with consensus trees
library(tidyverse)
read_file("RAxML_MajorityRuleExtendedConsensusTree.consensus_test2")
test <-read_file("RAxML_MajorityRuleExtendedConsensusTree.consensus_test2")
grep("[", test)
grep("[*]", test)
?grep
grep("[", test, fixed = TRUE)
strsplit(test, ",")
strsplit(test, ")")
strsplit(test, ":")
test2 <-strsplit(test, ":")
grep("[", test2, fixed = TRUE)
grep("1.0[", test2, fixed = TRUE)
grep("1.0", test2, fixed = TRUE)
length(test2)
test2 <-as.matrix(strsplit(test, ":"))
View(test2)
test2 <-as.data.frame(strsplit(test, ":"))
View(test2)
colnames(test2) <- "col1)"
View(test2)
colnames(test2) <- "col1"
grep('[', test2, fixed = TRUE)
length(test2$col1)
head(test2)
i<-1
grep("[", test2[i,1])
grep("[", test2[i,1], fixed = TRUE)
grep(/[, test2[i,1])
grep("/[", test2[i,1])
grep([:punct], test2[i,1])
grep([:punct], test2)
grep("[:punct]", test2)
grep("[a-z]", letters)
grep("/[", test2)
grep("\[", test2)
grep("[*]", test2)
grep("[1:100]", test2)
grep("[1:100]", test2[i,1])
test2[i,1]
test2[2,1]
grep('\[', test2[2,1])
grep('\\[', test2[2,1])
grep('\\[', test2[1,1])
grep('\\[', test2[1,1], value = TRUE)
grep('\\[', test2[2,1], value = TRUE)
grep('\\[', test2[i,1], value = TRUE)
grep('\\[', test2[i,1], value = TRUE) != 0
print('yes')
if(grep('\\[', test2[i,1], value = TRUE) != 0 ){
print('yes')
}
x <- grep('\\[', test2[1,1], value = TRUE)
y <- grep('\\[', test2[2,1], value = TRUE)
if(grep('\\[', test2[i,1], value = TRUE) != "" ){
print('yes')
}
grep('\\[', test2[i,1], value = TRUE)
grep('\\[', test2[i,1], value = TRUE) != ""
if(grep('\\[', test2[i,1], value = TRUE) != "")
{
print('yes')
if(grep('\\[', test2[i,1], value = TRUE) != ""){
print('yes')
}
for(i in 1:length(test2$col1)){
if(grep('\\[', test2[i,1], value = TRUE) != ""){
print('yes')
}
}
grepl('\\[', test2[i,1], value = TRUE) != ""
grepl('\\[', test2[i,1]) != ""
grepl('\\[', test2[i,1])
if(grepl('\\[', test2[i,1])){
print('yes')
}
i <- 2
if(grepl('\\[', test2[i,1])){
print('yes')
}
x <- test2[i,1]
str_split(x, "[")
str_split(x, "\\[")
as.data.frame(str_split(x, "\\["))
as.data.frame(str_split(x, c,("\\[", "\\]"))
str_split(x, "\\[", simplify = TRUE)
View(test2)
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]")
z <- str_split(y, "\\]", simplify = TRUE)
x <- test2[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
Y <- str_split(y, "\\]", simplify = TRUE)
x <- test2[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
y <- str_split(y, "\\]", simplify = TRUE)
View(y)
?str_split()
y <- str_split_fixed(x, "\\[" , simplify = TRUE)
y <- str_split_fixed(x, "\\[")
y <- str_split_fixed(x, "\\[", n = 1)
words <- c("These are   some words.")
str_count(words, boundary("word"))
str_split(words, " ")[[1]]
str_split(words, boundary("word"))[[1]]
str_split(words, boundary("word"))
str_split(x, boundary("\\["), simplify = TRUE)
y <- str_split(x, boundary("["), simplify = TRUE)
y <- str_split(x, boundary("[]"), simplify = TRUE)
y <- str_split(x, "\\["|"\\]", simplify = TRUE)
x <- test2[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]", simplify = TRUE)
View(z)
z
paste(z[2,1],":",z[1,1],z[2,2])
paste(z[2,1],":",z[1,1],z[2,2], sep = "")
test3 <- test2
test3[i,1] <- paste(z[2,1],":",z[1,1],z[2,2], sep = "")
View(test3)
i<-3
x <- test2[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]", simplify = TRUE)
test3[i,1] <- paste(z[2,1],":",z[1,1],z[2,2], sep = "")
test3 <- test2
for(i in 1:length(test2$col1)){
if(grepl('\\[', test2[i,1])){
x <- test2[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]", simplify = TRUE)
test3[i,1] <- paste(z[2,1],":",z[1,1],z[2,2], sep = "")
}
}
View(test3)
paste(test3, collapse = "")
paste(test3)
paste0(test3)
paste(test3, collapse = " ")
?str_split
paste(as.character(test3))
test3
as.character(test3)
as.vector(test3)
as.matrix(test3)
paste(as.matrix(test3))
paste(test3[1,1],test3[2,1])
paste(test3[1,1],test3[2,1], sep = "")
paste(test3[1:95,1],sep = "")
test4 <- NA
i <- 1
test4 <- paste(test4,test3[i,1], sep = "")
test4 <- NULL
test4 <- paste(test4,test3[i,1], sep = "")
i<-2
test4 <- paste(test4,test3[i,1], sep = "")
test4
test3 <- test2
test4 <- NULL
for(i in 1:length(test2$col1)){
if(grepl('\\[', test2[i,1])){
x <- test2[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]", simplify = TRUE)
test3[i,1] <- paste(z[2,1],":",z[1,1],z[2,2], sep = "")
}
test4 <- paste(test4,test3[i,1], sep = "")
}
test4
split_tree <- test2
fill_tree <- split_tree
final_tree <- NULL
length(split_tree[,1]
length(split_tree[,1])
length(split_tree[,1])
consensus_tree_convert <- function(in_tree){
tree_in<-read_file(in_tree)
split_tree <-as.data.frame(strsplit(tree_in, ":"))
fill_tree <- split_tree
final_tree <- NULL
for(i in 1:length(split_tree[,1])){
if(grepl('\\[', split_tree[i,1])){
x <- split_tree[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]", simplify = TRUE)
fill_tree[i,1] <- paste(z[2,1],":",z[1,1],z[2,2], sep = "")
}
final_tree <- paste(final_tree,fill_tree[i,1], sep = "")
}
return(final_tree)
}
consensus_tree_convert("RAxML_MajorityRuleExtendedConsensusTree.consensus_test2")
write_file(consensus_tree_convert("RAxML_MajorityRuleExtendedConsensusTree.consensus_test2"), "Consensus_tree2.tree")
#Script to fix format issues with consensus trees
#Goal is to switch scores from :x.x[yyy] to yyy:x.x
library(tidyverse)
consensus_tree_convert <- function(in_tree){
tree_in<-read_file(in_tree)
split_tree <-as.data.frame(strsplit(tree_in, ":"))
fill_tree <- split_tree
final_tree <- NULL
for(i in 1:length(split_tree[,1])){
if(grepl('\\[', split_tree[i,1])){
x <- split_tree[i,1]
y <- str_split(x, "\\[", simplify = TRUE)
z <- str_split(y, "\\]", simplify = TRUE)
fill_tree[i,1] <- paste(z[2,1],":",z[1,1],z[2,2], sep = "")
}
final_tree <- paste(final_tree,fill_tree[i,1], sep = "")
}
return(final_tree)
}
write_file(consensus_tree_convert("9_RAxML_consensus_trees/RAxML_MajorityRuleConsensusTree.consensus_test"),
"Consensus_tree1.tree")
write_file(consensus_tree_convert("9_RAxML_consensus_trees/RAxML_MajorityRuleExtendedConsensusTree.consensus_test2"),
"Consensus_tree2.tree")
write_file(consensus_tree_convert("9_RAxML_consensus_trees/RAxML_MajorityRuleExtendedConsensusTree.consensus_test3"),
"Consensus_tree3.tree")
