}
gene_ps<- as.data.frame(gene_data)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "avg_pdist", "locus_length") #naming columns for gene info matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- dist.dna(gene)#get distance matrix as data frame for names
avg_pdist <-mean(gene.dist)
locus_length <- length(gene[[1]])
rowdata <- c(gene_name, avg_pdist, locus_length)
gene_data <- rbind(gene_data,rowdata)
}
gene_ps<- as.data.frame(gene_data)
#scatterplot avg p-distance locus length (x)v avg p-dist   (y)for locus
plot(gene_ps$locus_length, gene_ps$avg_pdist)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 20, col = "grey80", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons")
radseq <- read.FASTA("COI_radseq_fastas/RAD_Tree/Liparidae_Final_RAD.fas")
radseq_p <- dist.dna(radseq)
mean(radseq_p)
filenames.f <- list.files(path = "../11_flanking_regions/aligned/") #make list of filenames of gene alignment fastas
flank_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "avg_pdist", "alignment_length") #naming columns for gene info matrix
for (i in 1:length(filenames.f)){ #loop over filename list to do action for each gene in folder
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",gene_name, sep = "")) #read in gene alignment
flank.dist <- dist.dna(flank)#get distance matrix as data frame for names
flank_pdist <-mean(flank.dist)
flank_length <- length(flank[[1]])
rowdataf <- c(flank_name, flank_pdist, flank_length)
flank_data <- rbind(flank_data,rowdataf)
}
length(filenames.f)
flank_name <- filenames.f[i]
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",gene_name, sep = "")) #read in gene alignment
paste("../11_flanking_regions/aligned/",gene_name, sep = "")
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
flank.dist <- dist.dna(flank)#get distance matrix as data frame for names
flank_pdist <-mean(flank.dist)
filenames.f <- list.files(path = "../11_flanking_regions/aligned/") #make list of filenames of gene alignment fastas
flank_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(flank_data) <- c("gene_name", "avg_pdist", "alignment_length") #naming columns for gene info matrix
for (i in 1:length(filenames.f)){ #loop over filename list to do action for each gene in folder
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
flank.dist <- dist.dna(flank)#get distance matrix as data frame for names
flank_pdist <-mean(flank.dist)
flank_length <- length(flank[[1]])
rowdataf <- c(flank_name, flank_pdist, flank_length)
flank_data <- rbind(flank_data,rowdataf)
}
flank_ps<- as.data.frame(flank_data)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 20, col = "grey80", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions")
filenames.f <- list.files(path = "../11_flanking_regions/aligned/") #make list of filenames of gene alignment fastas
identical_flanks <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_flanks) <- fullnames[,1] #name columns for full matrix
rownames(identical_flanks) <- fullnames[,1] #name rows for full matrix
for (i in 1:length(filenames.f)){ #loop over filename list to do action for each gene in folder
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
flank.dist <- as.data.frame(dist.dna(flank, as.matrix = TRUE)) #get distance matrix as data frame for names
columns.f <- colnames(flank.dist) #save column names from alignment
rows.f <- rownames(flank.dist) #save row names from alignment
flank.dist1 <- dist.dna(flank, as.matrix = TRUE) #distance matrix for analysis
flank.dist2 <- replace_upper_triangle(flank.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
flank.dist2 <- flank.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros.f <- which(flank.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
taxa_matches.f <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches.f) <- c("row","column") # name columns in dataframe
if(length(pzeros.f[,1])>0){
for (j in 1:length(pzeros.f[,1])){ #for each row in the list of cells where p-dist =0
index_row.f <- as.integer(pzeros.f[j,1]) # get the row number
index_col.f <- as.integer(pzeros.f[j,2]) #get the column number
rowdata.f <- c(rows.f[index_row.f], columns.f[index_col.f]) #convert those to taxa names based on row/column names above
taxa_matches.f <- rbind(taxa_matches.f,rowdata.f) #save it to the matrix created before for loop
}
for (k in 1:length(taxa_matches.f[,1])){#populate identical sequences matrix
test_row.f <- taxa_matches.f[k,1] #get taxa name for the row
test_col.f <- taxa_matches.f[k,2] #get taxa name for the column
identical_flanks[test_row.f,test_col.f] <- identical_flanks[test_row.f,test_col.f] +1
#replace given cell with that cell+1 to add another identical sequence to it.
}
}
}
View(taxa_matches.f)
i <- 1
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
i <- 2
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
i <- 150
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
i <- 3
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
i <- 34
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
filenames.f <- list.files(path = "../11_flanking_regions/aligned/") #make list of filenames of gene alignment fastas
full_flank <- read.FASTA("../11_flanking_regions/aligned/Tetraodon_nigroviridis.9.948265.948133.aln.fas")
full_flank <- as.data.frame(read.FASTA("../11_flanking_regions/aligned/Tetraodon_nigroviridis.9.948265.948133.aln.fas"))
full_flank <- as.matrix(read.FASTA("../11_flanking_regions/aligned/Tetraodon_nigroviridis.9.948265.948133.aln.fas"))
head(full_flank)
full_flank <- read.FASTA("../11_flanking_regions/aligned/Tetraodon_nigroviridis.9.948265.948133.aln.fas")
full_flank <- read.FASTA("../11_flanking_regions/aligned/Tetraodon_nigroviridis.9.948265.948133.aln.fas")
full_flank.dist <- as.data.frame(dist.dna(full_flank, as.matrix = TRUE))
full_flank_names <- colnames(full_flank.dist)
write.csv(full_flank_names, "full_flank_names.csv")
fullflanknames <- as.vector(read.csv("full_flank_names.csv")) #read in full names
View(fullflanknames)
write.csv(full_flank_names, "full_flank_names.csv", row.names = FALSE)
fullflanknames <- as.vector(read.csv("full_flank_names.csv")) #read in full names
identical_flanks <- matrix(data=0, nrow = 98, ncol = 98) #make matrix for tallying identical sequences
fullflanknames <- as.vector(read.csv("full_flank_names.csv")) #read in full names
colnames(identical_flanks) <- fullflanknames[,1] #name columns for full matrix
rownames(identical_flanks) <- fullflanknames[,1] #name rows for full matrix
View(fullflanknames)
View(identical_flanks)
filenames.f <- list.files(path = "../11_flanking_regions/aligned/") #make list of filenames of gene alignment fastas
identical_flanks <- matrix(data=0, nrow = 98, ncol = 98) #make matrix for tallying identical sequences
fullflanknames <- as.vector(read.csv("full_flank_names.csv")) #read in full names
colnames(identical_flanks) <- fullflanknames[,1] #name columns for full matrix
rownames(identical_flanks) <- fullflanknames[,1] #name rows for full matrix
for (i in 1:length(filenames.f)){ #loop over filename list to do action for each gene in folder
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
flank.dist <- as.data.frame(dist.dna(flank, as.matrix = TRUE)) #get distance matrix as data frame for names
columns.f <- colnames(flank.dist) #save column names from alignment
rows.f <- rownames(flank.dist) #save row names from alignment
flank.dist1 <- dist.dna(flank, as.matrix = TRUE) #distance matrix for analysis
flank.dist2 <- replace_upper_triangle(flank.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
flank.dist2 <- flank.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros.f <- which(flank.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
taxa_matches.f <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches.f) <- c("row","column") # name columns in dataframe
if(length(pzeros.f[,1])>0){
for (j in 1:length(pzeros.f[,1])){ #for each row in the list of cells where p-dist =0
index_row.f <- as.integer(pzeros.f[j,1]) # get the row number
index_col.f <- as.integer(pzeros.f[j,2]) #get the column number
rowdata.f <- c(rows.f[index_row.f], columns.f[index_col.f]) #convert those to taxa names based on row/column names above
taxa_matches.f <- rbind(taxa_matches.f,rowdata.f) #save it to the matrix created before for loop
}
for (k in 1:length(taxa_matches.f[,1])){#populate identical sequences matrix
test_row.f <- taxa_matches.f[k,1] #get taxa name for the row
test_col.f <- taxa_matches.f[k,2] #get taxa name for the column
identical_flanks[test_row.f,test_col.f] <- identical_flanks[test_row.f,test_col.f] +1
#replace given cell with that cell+1 to add another identical sequence to it.
}
}
}
write.csv(identical_flanks, "Identical_Flanks.csv")
install.packages("rstatix")
library(tidyverse)
library(ape)
library(rstatix)
filenames.f <- list.files(path = "../11_flanking_regions/aligned/") #make list of filenames of gene alignment fastas
flank_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(flank_data) <- c("gene_name", "avg_pdist", "alignment_length") #naming columns for gene info matrix
for (i in 1:length(filenames.f)){ #loop over filename list to do action for each gene in folder
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
flank.dist <- dist.dna(flank)#get distance matrix as data frame for names
flank_pdist <-mean(flank.dist)
flank_length <- length(flank[[1]])
rowdataf <- c(flank_name, flank_pdist, flank_length)
flank_data <- rbind(flank_data,rowdataf)
}
flank_ps<- as.data.frame(flank_data)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 20, col = "grey80", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions")
mean(flank_ps$avg_pdist)
mean(as.numeric(flank_ps$avg_pdist))
View(flank_ps)
flank_ps$avg_pdist <- as.numeric(flank_ps$avg_pdist)
View(flank_ps)
flank_ps$alignment_length <- as.numeric(flank_ps$alignment_length)
mean(flank_ps$avg_pdist)
min(flank_ps$avg_pdist)
View(flank_ps)
mean(flank_ps$avg_pdist, na.rm = TRUE)
length(which(is.na(flank_ps$avg_pdist)))
which(is.na(flank_ps$avg_pdist))
flank_ps[which(is.na(flank_ps$avg_pdist)),]
flank_ps[which(flank_ps$avg_pdist==0),]
i<-748
flank_name <- filenames.f[i] #get gene for each run
flank <- read.FASTA(paste("../11_flanking_regions/aligned/",flank_name, sep = "")) #read in gene alignment
flank.dist <- dist.dna(flank)#get distance matrix as data frame for names
dist.dna(flank)
flank[[1]]
mean(flank_ps$avg_pdist, na.rm = TRUE)
length(flank_ps$gene_name)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "avg_pdist", "locus_length") #naming columns for gene info matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- dist.dna(gene)#get distance matrix as data frame for names
avg_pdist <-mean(gene.dist)
locus_length <- length(gene[[1]])
rowdata <- c(gene_name, avg_pdist, locus_length)
gene_data <- rbind(gene_data,rowdata)
}
gene_ps<- as.data.frame(gene_data)
gene_ps$avg_pdist <- as.numeric(gene_ps$avg_pdist)
gene_ps$locus_length <- as.numeric(gene_ps$locus_length)
gene_ps[which(is.na(gene_ps$avg_pdist)),]
gene_ps$avg_pdist <- as.numeric(gene_ps$avg_pdist)
gene_ps$locus_length <- as.numeric(gene_ps$locus_length)
mean(gene_ps$avg_pdist)
length(gene_ps$gene_name)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 20, col = "grey80", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons")
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 20, col = "grey80", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 2)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "grey80", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey90", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,250), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(50,250), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(90,250), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bt = "l")
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bty = "l")
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bty = "l", cex.axis = 2)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(90,250), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(90,250), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(0,600), ylim = c(0,0.05),
bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(90,250), ylim = c(0,0.05))
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(90,600), ylim = c(0,0.05),
bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
#plot(gene_ps$locus_length, gene_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
# xlab = "Locus Length (bp)", main = "Distance for Aligned Exons", cex = 1.25, xlim = c(90,600), ylim = c(0,0.05),
#  bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions", cex = 1.25, xlim = c(500,15000), ylim = c(0,0.05),
bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions", cex = 1.25, bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
plot(flank_ps$alignment_length, flank_ps$avg_pdist, pch = 21, col = "black", bg = "grey60", ylab = "Average P-Distance",
xlab = "Alignment Length (bp)", main = "Distance for Aligned Flanking Regions", cex = 1.25, xlim = c(500,1500), ylim = c(0,0.05),
bty = "l", cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)
library(tidyverse)
sequences <- read.csv("1_assemblednew/assemble_result_supp/4284 documents from nf.csv")
sequences <- read.csv("../1_assemblednew/assemble_result_supp/4284 documents from nf.csv")
sequences <- read.csv("../2_assemble_result_supp/4284 documents from nf.csv")
head(sequences)
sequences$seq.num <- as.factor(sequences$X..Sequences)
length(levels(sequences$seq.num))
range(sequences$X..Sequences)
seq.counts <- as.data.frame(matrix(NA, nrow = 0, ncol = 2))
for (i in 2:98){
test.dat <- sequences %>% filter(X..Sequences > i) %>% count()
row.dat <- c(i,test.dat$n)
seq.counts <- rbind(seq.counts, row.dat)
}
colnames(seq.counts) <- c("NumSeqGreaterThan", "GenesRetained")
head(seq.counts)
tail(seq.counts)
ggplot(seq.counts) + geom_line(aes(x = NumSeqGreaterThan, y = GenesRetained)) + geom_hline(yintercept = 3000)
enriched <- read.csv("../2_assemble_result_supp/enriched_gene.csv")
hist(enriched$Num..of.enriched.genes)
enriched %>% filter(Num..of.enriched.genes <= 1000)
View(seq.counts)
45/98
98*.5
69/98
45/98
98*.5
69/98
98*.7
45/98
98*.5
69/98
98*.75
45/98
98*.5
69/98
98*.7
?vcfR
??vcfR
library(vcfR)
library(tidyverse)
library(stringr)
setwd("~/Documents/GitHub/jg-exon-capture/12_bowtie/")
source("vcf-parse-function.R")
vcf.names <- readLines("all_recoded_vcfs_list.txt")
vcf.names.noM <- vcf.names[-44]
vcf.onlyM <- vcf.names[44]
hist1.list <- list()
hist2.list <- list()
hist3.list <- list()
hist4.list <- list()
hist5.list <- list()
hist6.list <- list()
hist7.list <- list()
for(i in 1:length(vcf.names.noM)){
save.name <- str_sub(vcf.names.noM[i], 1, nchar(vcf.names.noM[i])-12)
my.vcf <- vcf.parser(vcf.names.noM[i])
hist1.list[[i]] <- my.vcf[[1]]
hist2.list[[i]] <- my.vcf[[2]]
hist3.list[[i]] <- my.vcf[[3]]
hist4.list[[i]] <- my.vcf[[4]]
hist5.list[[i]] <- my.vcf[[5]]
hist6.list[[i]] <- my.vcf[[6]]
hist7.list[[i]] <- my.vcf[[7]]
assign(save.name, my.vcf)
}
PPTY_UW116036_S442
PPTY_UW116036_S442$data
PPTY_UW116036_S442$dp.ad.tbl
PPTY_UW116036_S442[[8]]
dp.ad.list <- list()
dp.ad.f1list <- list()
tbl.by.loc.list <- list
for(i in 1:length(vcf.names.noM)){
save.name <- str_sub(vcf.names.noM[i], 1, nchar(vcf.names.noM[i])-12)
my.vcf <- vcf.parser(vcf.names.noM[i])
hist1.list[[i]] <- my.vcf[[1]]
hist2.list[[i]] <- my.vcf[[2]]
hist3.list[[i]] <- my.vcf[[3]]
hist4.list[[i]] <- my.vcf[[4]]
hist5.list[[i]] <- my.vcf[[5]]
hist6.list[[i]] <- my.vcf[[6]]
hist7.list[[i]] <- my.vcf[[7]]
dp.ad.list[[i]] <- my.vcf[[8]]
dp.ad.f1list[[i]] <- my.vcf[[9]]
tbl.by.loc.list[[i]] <- my.vcf[[10]]
assign(save.name, my.vcf)
}
PPTY_UW116036_S442[[10]]
length(PPTY_UW116036_S442[[10]])
nrow(PPTY_UW116036_S442[[10]])
PPTY_UW116036_S442[[8]]$Depth
mean(PPTY_UW116036_S442[[8]]$Depth)
tbl.by.loc.list <- list()
length(which(PPTY_UW116036_S442[[8]]$Depth <= 20))
avg.tot.depth <- list()
avg.filt.depth <- list()
percent.sites.removed <- list()
filt.SNP.num <- list ()
Gene.per.indivi <- list()
for(i in 1:length(vcf.names.noM)){
save.name <- str_sub(vcf.names.noM[i], 1, nchar(vcf.names.noM[i])-12)
my.vcf <- vcf.parser(vcf.names.noM[i])
hist1.list[[i]] <- my.vcf[[1]]
hist2.list[[i]] <- my.vcf[[2]]
hist3.list[[i]] <- my.vcf[[3]]
hist4.list[[i]] <- my.vcf[[4]]
hist5.list[[i]] <- my.vcf[[5]]
hist6.list[[i]] <- my.vcf[[6]]
hist7.list[[i]] <- my.vcf[[7]]
avg.tot.depth[[i]] <- mean(my.vcf[[8]]$Depth)
avg.filt.depth[[i]] <- mean(my.vcf[[9]]$Depth)
percent.sites.removed[[i]] <- length(which(my.vcf[[8]]$Depth <= 20))/length(my.vcf[[8]]$Depth)
filt.SNP.num[[i]] <- length(my.vcf[[9]]$Depth)
Gene.per.indivi[[i]] <- nrow(my.vcf[[10]])
assign(save.name, my.vcf)
}
head(avg.tot.depth)
mean(avg.tot.depth)
as.vector(avg.tot.depth)
test <- c(1:45)
i <- 34
test[i]
test <- c(-20:40)
test[i]
for(i in 1:length(vcf.names.noM)){
save.name <- str_sub(vcf.names.noM[i], 1, nchar(vcf.names.noM[i])-12)
my.vcf <- vcf.parser(vcf.names.noM[i])
hist1.list[[i]] <- my.vcf[[1]]
hist2.list[[i]] <- my.vcf[[2]]
hist3.list[[i]] <- my.vcf[[3]]
hist4.list[[i]] <- my.vcf[[4]]
hist5.list[[i]] <- my.vcf[[5]]
hist6.list[[i]] <- my.vcf[[6]]
hist7.list[[i]] <- my.vcf[[7]]
avg.tot.depth[i] <- mean(my.vcf[[8]]$Depth)
avg.filt.depth[i] <- mean(my.vcf[[9]]$Depth)
percent.sites.removed[i] <- length(which(my.vcf[[8]]$Depth <= 20))/length(my.vcf[[8]]$Depth)
filt.SNP.num[i] <- length(my.vcf[[9]]$Depth)
Gene.per.indivi[i] <- nrow(my.vcf[[10]])
assign(save.name, my.vcf)
}
mean(avg.tot.depth)
mean(as.numeric(avg.tot.depth))
mean(as.numeric(avg.filt.depth))
mean(as.numeric(percent.sites.removed))
mean(as.numeric(filt.SNP.num))
mean(as.numeric(Gene.per.indivi))
head(Gene.per.indivi)
vcf.names <- readLines("all_recoded_vcfs_list.txt")
vcf.names.noM <- vcf.names[-44]
vcf.onlyM <- vcf.names[44]
hist1.list <- list()
hist2.list <- list()
hist3.list <- list()
hist4.list <- list()
hist5.list <- list()
hist6.list <- list()
hist7.list <- list()
avg.tot.depth <- c()
avg.filt.depth <- c()
percent.sites.removed <- c()
filt.SNP.num <- c()
Gene.per.indivi <- c()
for(i in 1:length(vcf.names.noM)){
save.name <- str_sub(vcf.names.noM[i], 1, nchar(vcf.names.noM[i])-12)
my.vcf <- vcf.parser(vcf.names.noM[i])
hist1.list[[i]] <- my.vcf[[1]]
hist2.list[[i]] <- my.vcf[[2]]
hist3.list[[i]] <- my.vcf[[3]]
hist4.list[[i]] <- my.vcf[[4]]
hist5.list[[i]] <- my.vcf[[5]]
hist6.list[[i]] <- my.vcf[[6]]
hist7.list[[i]] <- my.vcf[[7]]
avg.tot.depth[i] <- mean(my.vcf[[8]]$Depth)
avg.filt.depth[i] <- mean(my.vcf[[9]]$Depth)
percent.sites.removed[i] <- length(which(my.vcf[[8]]$Depth <= 20))/length(my.vcf[[8]]$Depth)
filt.SNP.num[i] <- length(my.vcf[[9]]$Depth)
Gene.per.indivi[i] <- nrow(my.vcf[[10]])
assign(save.name, my.vcf)
}
source("vcf-parse-function.R")
for(i in 1:length(vcf.names.noM)){
save.name <- str_sub(vcf.names.noM[i], 1, nchar(vcf.names.noM[i])-12)
my.vcf <- vcf.parser(vcf.names.noM[i])
hist1.list[[i]] <- my.vcf[[1]]
hist2.list[[i]] <- my.vcf[[2]]
hist3.list[[i]] <- my.vcf[[3]]
hist4.list[[i]] <- my.vcf[[4]]
hist5.list[[i]] <- my.vcf[[5]]
hist6.list[[i]] <- my.vcf[[6]]
hist7.list[[i]] <- my.vcf[[7]]
avg.tot.depth[i] <- mean(my.vcf[[8]]$Depth)
avg.filt.depth[i] <- mean(my.vcf[[9]]$Depth)
percent.sites.removed[i] <- length(which(my.vcf[[8]]$Depth <= 20))/length(my.vcf[[8]]$Depth)
filt.SNP.num[i] <- length(my.vcf[[9]]$Depth)
Gene.per.indivi[i] <- nrow(my.vcf[[10]])
assign(save.name, my.vcf)
}
mean(as.numeric(avg.tot.depth))
mean(as.numeric(avg.filt.depth))
mean(as.numeric(percent.sites.removed))
mean(as.numeric(filt.SNP.num))
mean(as.numeric(Gene.per.indivi))
library(ape)
library(rstatix)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
