ifelse(round(column)>column,round(column),round(column)+1)
library(tidyverse)
library(ape)
gene <- read.FASTA("../4_Run_2/7_nf_aligned_orn/Danio_rerio.1.10132455.10132285.fas")
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE))
columns <- colnames(gene.dist)
rows <- rownames(gene.dist)
gene.dist1 <- as.matrix(gene.dist)
colnames(gene.dist1) <- NULL
rownames(gene.dist1) <- NULL
taxa <- length(gene.dist)
pzeros <- which(gene.dist1==0, arr.ind = TRUE)
pzeros1 <- pzeros[which(pzeros[,1]!=pzeros[,2]),]
length(pzeros1)
length(pzeros1[1])
length(pzeros1[1],)
length(pzeros1[1,])
length(pzeros1[,1])
i<-1
index <- pzeros1[i,]
head(pzeros1)
index_row <- pzeros1[i,1]
index_col <- pzeros1[i,2]
index_col
index_row
index_row <- as.integer(pzeros1[i,1])
index_col <- as.integer(pzeros1[i,2])
rowtax <- rows[index_row]
coltax <- columns[index_col]
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 1)
colnames(taxa_matches) <- ("row","column")
colnames(taxa_matches) <- c("row","column")
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2)
colnames(taxa_matches) <- c("row","column")
View(taxa_matches)
rowdata <- c(rows[index_row], columns[index_col])
taxa_matches <- rbind(taxa_matches,rowdata)
View(taxa_matches)
gene <- read.FASTA("../4_Run_2/7_nf_aligned_orn/Danio_rerio.1.10132455.10132285.fas")
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE))
columns <- colnames(gene.dist)
rows <- rownames(gene.dist)
gene.dist1 <- as.matrix(gene.dist)
colnames(gene.dist1) <- NULL
rownames(gene.dist1) <- NULL
taxa <- length(gene.dist)
pzeros <- which(gene.dist1==0, arr.ind = TRUE)
pzeros1 <- pzeros[which(pzeros[,1]!=pzeros[,2]),]
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2)
colnames(taxa_matches) <- c("row","column")
for (i in 1:length(pzeros1[,1])){
index_row <- as.integer(pzeros1[i,1])
index_col <- as.integer(pzeros1[i,2])
rowdata <- c(rows[index_row], columns[index_col])
taxa_matches <- rbind(taxa_matches,rowdata)
}
testmatrix <- matrix(data=1:25, nrow = 1, ncol =1)
testmatrix <- matrix(data=1:25, nrow = 5, ncol =5)
View(testmatrix)
genetest <- dist.dna(gene,as.matrix = TRUE)
genetest <- genetest[5,5]
genetest <- genetest[1:5,1:5]
genetest <- genetest[c(1:5),c(1:5)]
genetest <- dist.dna(gene,as.matrix = TRUE)
genetest <- genetest[c(1:5),c(1:5)]
View(genetest)
genetest <- dist.dna(gene,as.matrix = TRUE)
genetest <- genetest[c(10:15),c(10:15)]
View(genetest)
which(genetest==0, arr.ind = TRUE)
genetest
diag(genetest)
lower.tri(genetest, diag = FALSE)
lower.tri(genetest, diag = FALSE)*genetest
replace_upper_triangle
install.packages("rstatix")
library(rstatix)
replace_upper_triangle(genetest, by = NA, diagonal = FALSE)
gene <- read.FASTA("../4_Run_2/7_nf_aligned_orn/Danio_rerio.1.10132455.10132285.fas")
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE))
columns <- colnames(gene.dist)
rows <- rownames(gene.dist)
taxa <- length(gene.dist)
gene.dist1 <- as.matrix(gene.dist)
colnames(gene.dist1) <- NULL
rownames(gene.dist1) <- NULL
replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE)
gene.dist1 <- as.matrix(gene.dist)
colnames(gene.dist1) <- NULL
rownames(gene.dist1) <- NULL
View(gene.dist1)
View(genetest)
gene.dist1 <- as.matrix(gene.dist)
replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE)
pzeros <- which(gene.dist1==0, arr.ind = TRUE)
View(gene.dist1)
gene.dist1 <- dist.dna(gene, as.matrix = TRUE)
replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE)
View(gene.dist1)
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE)
View(gene.dist2)
pzeros <- which(gene.dist2==0, arr.ind = TRUE)
pzeros1 <- pzeros[which(pzeros[,1]!=pzeros[,2]),]
View(pzeros)
gene.dist2 <- gene.dist2[,-1]
View(gene.dist2)
pzeros <- which(gene.dist2==0, arr.ind = TRUE)
pzeros1 <- pzeros[which(pzeros[,1]!=pzeros[,2]),]
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2)
colnames(taxa_matches) <- c("row","column")
gene <- read.FASTA("../4_Run_2/7_nf_aligned_orn/Danio_rerio.1.10132455.10132285.fas")
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE))
columns <- colnames(gene.dist)
rows <- rownames(gene.dist)
taxa <- length(gene.dist)
gene.dist1 <- dist.dna(gene, as.matrix = TRUE)
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE)
gene.dist2 <- gene.dist2[,-1]
pzeros <- which(gene.dist2==0, arr.ind = TRUE)
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2)
colnames(taxa_matches) <- c("row","column")
for (i in 1:length(pzeros1[,1])){
index_row <- as.integer(pzeros1[i,1])
index_col <- as.integer(pzeros1[i,2])
rowdata <- c(rows[index_row], columns[index_col])
taxa_matches <- rbind(taxa_matches,rowdata)
}
View(taxa_matches)
gene_matches <- length(pzeors[,1])
gene_matches <- length(pzeros[,1])
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences")
gene_data <- matrix(data = NA, nrow = 0, ncol = 3)
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences")
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/")
head(filenames)
length(filenames)
filenames[1]
i<-1
gene_name <- filenames[i]
paste("../4_Run_2/7_nf_aligned_orn/",gene_name)
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name)) #read in gene alignment
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
fullnames <- read.FASTA("../4_Run_2/7_nf_aligned_orn/Tetraodon_nigroviridis.9.5723174.5722998") #read in gene alignment
fullnames <- read.FASTA("../4_Run_2/7_nf_aligned_orn/Tetraodon_nigroviridis.9.5723174.5722998.fas")
full.genes <- as.data.frame(dist.dna(fullnames, as.matrix = TRUE))
fullcolumns <- colnames(full.genes) #save column names from alignment
fullrows <- rownames(full.genes) #save row names from alignment
fullrows == fullcolumns
write.csv("fullcolumns.csv", row.names = FALSE)
write.csv(fullcolumns,"full_names.csv", row.names = FALSE)
write.csv(fullcolumns,"full_names.csv", row.names = FALSE, col.names = FALSE)
write.csv(fullcolumns,"full_names.csv", row.names = FALSE)
fullnames <- read.csv("full_names.csv")
View(fullnames)
fullnames <- as.character(fullnames)
fullnames <- read.csv("full_names.csv")
fullnames <- fullnames[1]
View(fullnames)
fullnames <- as.character(fullnames[1])
fullnames <- as.vector(read.csv("full_names.csv"))
View(fullnames)
fullnames <- as.character(fullnames[1])
identical_sequences <- matrix(data=NA, nrow = 97, ncol = 97)
fullnames <- as.vector(read.csv("full_names.csv"))
fullnames[,1]
taxa_names <- fullnames[,1]
colnames(identical_sequences) <- fullnames[,1]
rownames(identical_sequences) <- fullnames[,1]
View(identical_sequences)
length(taxa_matches[,1])
View(pzeros)
test_row <- taxa_matches[i,1]
test_col <- taxa_matches[i,2]
head(taxa_matches)
View(identical_sequences)
NA+1
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
identical_sequences[test_row,test_col]
identical_sequences[1,1]
identical_sequences["ATAN_UW150813_S404","AUNA_UW150790_S402"]
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
identical_sequences[test_row,test_col]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
View(identical_sequences)
for (i in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[i,1]
test_col <- taxa_matches[i,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
View(identical_sequences)
sum(identical_sequences==1)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
for (i in 1:length(pzeros1[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros1[i,1]) # get the row number
index_col <- as.integer(pzeros1[i,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on the row and column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
for (i in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[i,1]
test_col <- taxa_matches[i,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
View(taxa_matches)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
View(fullnames)
View(gene_data)
gene_name <- filenames[i] #get gene for each run
i<-1
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
for (i in 1:length(pzeros[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros[i,1]) # get the row number
index_col <- as.integer(pzeros[i,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on the row and column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
for (j in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[j,1]
test_col <- taxa_matches[j,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
sum(identical_sequences==1)
for (j in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[j,1]
test_col <- taxa_matches[j,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
sum(identical_sequences==1)
sum(identical_sequences==2)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
for (i in 1:length(pzeros[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros[i,1]) # get the row number
index_col <- as.integer(pzeros[i,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on the row and column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
for (j in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[j,1]
test_col <- taxa_matches[j,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
gene_row <- c(gene_name, taxa, gene_matches) #make row for current gene
gene_data <- rbind(gene_data, gene) #attach to gene data matrix
}
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
for (j in 1:length(pzeros[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros[j,1]) # get the row number
index_col <- as.integer(pzeros[j,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on the row and column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
for (k in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[k,1]
test_col <- taxa_matches[k,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
gene_row <- c(gene_name, taxa, gene_matches) #make row for current gene
gene_data <- rbind(gene_data, gene) #attach to gene data matrix
}
filenames[2]
filenames[4]
filenames[gene_name]
gene_name
which(filenames==gene_name)
i <- 83
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
for (j in 1:length(pzeros[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros[j,1]) # get the row number
index_col <- as.integer(pzeros[j,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on the row and column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
View(pzeros)
i <- 83
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
if(length(pzeros[,1])>0){
for (j in 1:length(pzeros[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros[j,1]) # get the row number
index_col <- as.integer(pzeros[j,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on row/column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
for (k in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[k,1]
test_col <- taxa_matches[k,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
}
gene_row <- c(gene_name, taxa, gene_matches) #make row for current gene
gene_data <- rbind(gene_data, gene) #attach to gene data matrix
View(gene_data)
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
gene_row <- c(gene_name, taxa, gene_matches) #make row for current gene
gene_data <- rbind(gene_data, gene) #attach to gene data matrix
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
gene_row <- c(gene_name, taxa, gene_matches) #make row for current gene
gene_data <- rbind(gene_data, gene_row) #attach to gene data matrix
View(gene_data)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 3) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "taxa_included", "identical_sequences") #naming columns for gene info matrix
identical_sequences <- matrix(data=0, nrow = 97, ncol = 97) #make matrix for tallying identical sequences
fullnames <- as.vector(read.csv("full_names.csv")) #read in full names
colnames(identical_sequences) <- fullnames[,1] #name columns for full matrix
rownames(identical_sequences) <- fullnames[,1] #name rows for full matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- as.data.frame(dist.dna(gene, as.matrix = TRUE)) #get distance matrix as data frame for names
columns <- colnames(gene.dist) #save column names from alignment
rows <- rownames(gene.dist) #save row names from alignment
taxa <- length(gene.dist) #get number of taxa with sequences for that gene
gene.dist1 <- dist.dna(gene, as.matrix = TRUE) #distance matrix for analysis
gene.dist2 <- replace_upper_triangle(gene.dist1, by = NA, diagonal = FALSE) #replace upper triangle and diagonal with
#NAs, this ensures all zeros are only from identical sequences without duplicates or self matches
gene.dist2 <- gene.dist2[,-1] # remove rownames column that replace_upper_triangle generates
pzeros <- which(gene.dist2==0, arr.ind = TRUE) #get a list of row and column numbers where p-dist = 0
gene_matches <- length(pzeros[,1]) #get number of identical sequence pairs for this gene
taxa_matches <- matrix(data = NA, nrow = 0, ncol = 2) #make empty data frame to save taxa matches
colnames(taxa_matches) <- c("row","column") # name columns in dataframe
if(length(pzeros[,1])>0){
for (j in 1:length(pzeros[,1])){ #for each row in the list of cells where p-dist =0
index_row <- as.integer(pzeros[j,1]) # get the row number
index_col <- as.integer(pzeros[j,2]) #get the column number
rowdata <- c(rows[index_row], columns[index_col]) #convert those to taxa names based on row/column names above
taxa_matches <- rbind(taxa_matches,rowdata) #save it to the matrix created before for loop
}
for (k in 1:length(taxa_matches[,1])){
test_row <- taxa_matches[k,1]
test_col <- taxa_matches[k,2]
identical_sequences[test_row,test_col] <- identical_sequences[test_row,test_col] +1
}
}
gene_row <- c(gene_name, taxa, gene_matches) #make row for current gene
gene_data <- rbind(gene_data, gene_row) #attach to gene data matrix
}
View(identical_sequences)
write.csv(identical_sequences, "Identical_Sequences.csv", row.names = FALSE)
write.csv(gene_data, "Gene_Data.csv", row.names = FALSE)
write.csv(identical_sequences, "Identical_Sequences.csv")
i<-1
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 2) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "avg_pdist") #naming columns for gene info matrix
library(tidyverse)
library(ape)
library(rstatix)
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- dist.dna(gene)#get distance matrix as data frame for names
mean(gene.dist)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 2) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "avg_pdist") #naming columns for gene info matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- dist.dna(gene)#get distance matrix as data frame for names
avg_pdist <-mean(gene.dist)
rowdata <- c(gene_name, avg_pdist)
gene_data <- rbind(gene_data,avg_pdist)
}
View(gene_data)
filenames <- list.files(path = "../4_Run_2/7_nf_aligned_orn/") #make list of filenames of gene alignment fastas
gene_data <- matrix(data = NA, nrow = 0, ncol = 2) #second matrix with gene info
colnames(gene_data) <- c("gene_name", "avg_pdist") #naming columns for gene info matrix
for (i in 1:length(filenames)){ #loop over filename list to do action for each gene in folder
gene_name <- filenames[i] #get gene for each run
gene <- read.FASTA(paste("../4_Run_2/7_nf_aligned_orn/",gene_name, sep = "")) #read in gene alignment
gene.dist <- dist.dna(gene)#get distance matrix as data frame for names
avg_pdist <-mean(gene.dist)
rowdata <- c(gene_name, avg_pdist)
gene_data <- rbind(gene_data,rowdata)
}
hist(gene_data$)
hist(gene_data[,2])
View(gene_data)
gene_ps<- as.data.frame(gene_data)
hist(gene_ps$avg_pdist)
hist(as.numeric(gene_ps$avg_pdist))
gene_ps$avg_pdist <- as.numeric(gene_ps$avg_pdist)
sum(gene_ps$avg_pdist>0.05)
radseq <- read.dna("COI_radseq_fastas/RAD_Tree/Liparidae_Final_RAD.fas")
radseq <- read.FASTA("COI_radseq_fastas/RAD_Tree/Liparidae_Final_RAD.fas")
radseq_p <- dist.dna(radseq)
mean(radseq_p)
